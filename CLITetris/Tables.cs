namespace CLITetris;

internal static partial class Program
{
    private static readonly string[] BlockColors =
    {
        "[37;47m  ", // Empty (White)
        "[37;46;1m  ", // I - Light Blue
        "[37;43;1m  ", // O - Yellow
        "[37;45;1m  ", // T - Purple
        "[37;42;1m  ", // S - Green
        "[37;41;1m  ", // Z - Red
        "[37;44;1m  ", // J - Blue
        "[48;5;208m  ", // L - Orange
    };

    private static readonly (int X, int Y)[][][] BlockData =
    {
        new[] //Empty
        {
            new[]
            {
                (0, 0),
                (0, 0),
                (0, 0),
                (0, 0),
            },
            new[]
            {
                (0, 0),
                (0, 0),
                (0, 0),
                (0, 0),
            },
            new[]
            {
                (0, 0),
                (0, 0),
                (0, 0),
                (0, 0),
            },
            new[]
            {
                (0, 0),
                (0, 0),
                (0, 0),
                (0, 0),
            },
        },
        new[] //I
        {
            new[]
            {
                (0, 1), //Â·Â·Â·Â·
                (1, 1), //####
                (2, 1), //Â·Â·Â·Â·
                (3, 1), //Â·Â·Â·Â·
            },
            new[]
            {
                (2, 0), //Â·Â·#Â·
                (2, 1), //Â·Â·#Â·
                (2, 2), //Â·Â·#Â·
                (2, 3), //Â·Â·#Â·
            },
            new[]
            {
                (0, 2), //Â·Â·Â·Â·
                (1, 2), //Â·Â·Â·Â·
                (2, 2), //####
                (3, 2), //Â·Â·Â·Â·
            },
            new[]
            {
                (1, 0), //Â·#Â·Â·
                (1, 1), //Â·#Â·Â·
                (1, 2), //Â·#Â·Â·
                (1, 3), //Â·#Â·Â·
            },
        },
        new[] //Â·
        {
            new[]
            {
                (0, 1), //Â·##Â·
                (1, 1), //Â·##Â·
                (0, 0),
                (1, 0),
            },
            new[]
            {
                (0, 1), //Â·##Â·
                (1, 1), //Â·##Â·
                (0, 0),
                (1, 0),
            },
            new[]
            {
                (0, 1), //Â·##Â·
                (1, 1), //Â·##Â·
                (0, 0),
                (1, 0),
            },
            new[]
            {
                (0, 1), //Â·##Â·
                (1, 1), //Â·##Â·
                (0, 0),
                (1, 0),
            },
        },
        new[] //T
        {
            new[]
            {
                (0, 1), //Â·#Â·
                (1, 1), //###
                (2, 1), //Â·Â·Â·
                (1, 0),
            },
            new[]
            {
                (1, 2), //Â·Â·#
                (2, 1), //Â·##
                (1, 1), //Â·Â·#
                (1, 0),
            },
            new[]
            {
                (1, 2), //Â·Â·Â·
                (2, 1), //###
                (0, 1), //Â·#Â·
                (1, 1),
            },
            new[]
            {
                (1, 2), //Â·#Â·
                (0, 1), //##Â·
                (1, 1), //Â·#Â·
                (1, 0),
            },
        },
        new[] //S
        {
            new[]
            {
                (0, 1), //Â·##
                (1, 1), //##Â·
                (1, 0), //Â·Â·Â·
                (2, 0),
            },
            new[]
            {
                (2, 2), //Â·#Â·
                (2, 1), //Â·##
                (1, 1), //Â·Â·#
                (1, 0),
            },
            new[]
            {
                (0, 2), //Â·Â·Â·
                (1, 2), //Â·##
                (1, 1), //##Â·
                (2, 1),
            },
            new[]
            {
                (1, 2), //#Â·Â·
                (1, 1), //##Â·
                (0, 1), //Â·#Â·
                (0, 0),
            },
        },
        new[] //Z
        {
            new[]
            {
                (1, 1), //##Â·
                (2, 1), //Â·##
                (0, 0), //Â·Â·Â·
                (1, 0),
            },
            new[]
            {
                (1, 2), //Â·Â·#
                (1, 1), //.##
                (2, 1), //.#.
                (2, 0),
            },
            new[]
            {
                (1, 2), //Â·Â·Â·
                (2, 2), //##Â·
                (0, 1), //Â·##
                (1, 1),
            },
            new[]
            {
                (0, 2), //Â·#Â·
                (0, 1), //##Â·
                (1, 1), //#Â·Â·
                (1, 0),
            },
        },
        new[] //J
        {
            new[]
            {
                (0, 1), //#Â·Â·
                (1, 1), //###
                (2, 1), //Â·Â·Â·
                (0, 0),
            },
            new[]
            {
                (1, 2), //Â·##
                (1, 1), //Â·#Â·
                (1, 0), //Â·#Â·
                (2, 0),
            },
            new[]
            {
                (2, 2), //Â·Â·Â·
                (2, 1), //###
                (1, 1), //Â·Â·#
                (0, 1),
            },
            new[]
            {
                (0, 2), //Â·#Â·
                (1, 2), //Â·#Â·
                (1, 1), //##Â·
                (1, 0),
            },
        },
        new[] //L
        {
            new[]
            {
                (0, 1), //Â·Â·#
                (1, 1), //###
                (2, 1), //Â·Â·Â·
                (2, 0),
            },
            new[]
            {
                (2, 2), //Â·#Â·
                (1, 2), //Â·#Â·
                (1, 1), //Â·##
                (1, 0),
            },
            new[]
            {
                (0, 2), //Â·Â·Â·
                (0, 1), //###
                (1, 1), //#Â·Â·
                (2, 1),
            },
            new[]
            {
                (1, 2), //##Â·
                (1, 1), //Â·#Â·
                (1, 0), //Â·#Â·
                (0, 0),
            },
        },
    };

    private enum Blocks
    {
        Empty,
        I,
        O,
        T,
        S,
        Z,
        J,
        L,
    }
    
    private enum Rotation
    {
        Up,
        Right,
        Down,
        Left,
    }
}